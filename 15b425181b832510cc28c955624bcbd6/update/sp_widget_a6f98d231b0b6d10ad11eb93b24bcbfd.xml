<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[api.controller=function($rootScope, $scope, $window, $timeout, spUtil, $sce, spModal, $uibModal, $location, cabrillo, snAnalytics) {
  /* widget controller */
  var c = this;
	c.question = '';
	c.disableButton = false;
	c.textButton = 'Ask';
	
  function sendQuestionAnswerAnalytics(question, answer) {
    var payload= {};
    payload.name = "Click on Call";
    payload.data = {};
    payload.data.Question = question;
    payload.data.Answer = answer;
    payload.data.When = new Date().toISOString();
    snAnalytics.addEvent(payload);
  }
	
	c.askQuestion = function() {
		c.disableButton = true;
		c.textButton = 'Loading...';
		
		c.server.get({
			question: c.question,
			action: 'ask_question',
		}).then(function (response) {
			c.disableButton = false;
			c.textButton = 'Ask';
			
			c.answer = response.data.answer;
			
			sendQuestionAnswerAnalytics(c.question, response.data.answer);
		});
	};
};]]></client_script>
        <controller_as>c</controller_as>
        <css>.panel-body, .ask-container-form-group {&#13;
		display: flex;&#13;
  	flex-direction: column;&#13;
}&#13;
&#13;
.panel-body button {&#13;
	margin-top: 1rem;&#13;
}&#13;
&#13;
.present-answer {&#13;
	margin-top: 1rem;&#13;
}&#13;
</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>true</has_preview>
        <id/>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) { 

 }]]></link>
        <name>ChatGPT ServiceNow Specialist</name>
        <option_schema>[{"displayValue":"WidgetCredentials","hint":"Select the API Key of ChatGPT","name":"chatgpt_credential","section":"Data","label":"ChatGPT Credential","type":"reference","value":"x_stefa_studyapp_widgetcredentials","ed":{"reference":"x_stefa_studyapp_widgetcredentials"}}]</option_schema>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {
  /* populate the 'data' object */
  /* e.g., data.table = $sp.getValue('table'); */
	
	var chUtil = new ChameleonUtil();
	var configKey = chUtil.getConfigKey('ChatGPTApiKey');

	if (!configKey || !configKey.value) {
		data.no_api_key = true;
		return;
	}
	
	var CHATAPI_KEY = configKey.value;
	var localInput = input;
	if (!localInput)
		return;

	if (localInput.action == 'ask_question') {
		var question = localInput.question;

		if (!question)
			return;

		// Set up the REST message
		var restMessage = new sn_ws.RESTMessageV2();
		restMessage.setEndpoint("https://api.openai.com/v1/chat/completions");
		restMessage.setRequestHeader("Authorization", 'Bearer ' + CHATAPI_KEY);
		restMessage.setHttpMethod("post");
		restMessage.setRequestHeader("Content-Type", "application/json");

		// Set up the request body
		var requestBody = {
			"model": "gpt-3.5-turbo",
			"messages": [
				{
					"role": "system",
					"content": "I want you to act as a ServiceNow developer and be prepared to help answer questions related to coding and technical aspects of the platform. Whether it's writing a script using Javascript to update a specific column value or troubleshooting an issue with a particular ServiceNow feature, I'm here to assist you. I can provide actual code snippets and technical explanations to help you achieve your objectives, and I'm also familiar with the platform's limitations and constraints. So feel free to ask me anything related to ServiceNow development, and I'll do my best to provide the help you need."
				},
				{
					"role": "user",
					"content": 'Now, answer the following question: "' + question.replace(/"/g, '') + '"'
				}
			],
			"presence_penalty": 0,
			"frequency_penalty": 0,
			"max_tokens": 1000,
			"stream": false,
			"top_p": 1,
			"temperature": 0.5
		};
		restMessage.setRequestBody(JSON.stringify(requestBody));

		try {
			// Execute the request
			var response = restMessage.execute();
			gs.debug("Response");
			gs.debug(response);

			// Parse the response
			var responseBody = response.getBody();
			var httpStatus = response.getStatusCode();
			
			gs.debug('Body:' + responseBody);
			gs.debug('StatusCode:' + httpStatus);
			
			if (httpStatus != 200) {
				gs.error('StatusCode:' + httpStatus);
				gs.error('Body:' + responseBody);
				
				data.answer = 'Error: The ChatGPT did not answer with a good status, probably you hit the rate limit, wait a couple seconds and try again!';
				return;
			}
			
			var responseBodyParsed = JSON.parse(responseBody);
			gs.debug(responseBodyParsed);

			var answer = responseBodyParsed.choices[0].message.content;

			data.answer = answer;
		} catch (e) {
			gs.error('Error calling GPT Templates: ' + e);

			data.answer = 'Error calling GPT Templates: ' + e.message;
		}
	}
})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>vinicius.lourenco@stefanini.com</sys_created_by>
        <sys_created_on>2023-06-01 17:35:41</sys_created_on>
        <sys_id>a6f98d231b0b6d10ad11eb93b24bcbfd</sys_id>
        <sys_mod_count>17</sys_mod_count>
        <sys_name>ChatGPT ServiceNow Specialist</sys_name>
        <sys_package display_value="Chameleon" source="x_stefa_chameleon">15b425181b832510cc28c955624bcbd6</sys_package>
        <sys_policy/>
        <sys_scope display_value="Chameleon">15b425181b832510cc28c955624bcbd6</sys_scope>
        <sys_update_name>sp_widget_a6f98d231b0b6d10ad11eb93b24bcbfd</sys_update_name>
        <sys_updated_by>andre.nunes@stefanini.com</sys_updated_by>
        <sys_updated_on>2023-10-17 17:51:46</sys_updated_on>
        <template><![CDATA[<div class="panel panel-default">
  <div class="panel-heading">
    <h2 class="panel-title">
    		ServiceNOW Specialist
    </h2>
  </div>
  <div ng-if="!data.no_api_key" class="panel-body">
    <div class="ask-container-form-group">
      <label>Ask your question to ServiceNow Specialist</label>
      <input name="question" ng-model="c.question">

      <small>The answers are provided by ChatGPT 3.5</small>
    </div>
    <button ng-click="c.askQuestion()" ng-disabled="c.disableButton" class="btn btn-primary">
      {{c.textButton}}
    </button>

    <div ng-show="c.answer" class="present-answer">
      <p>
        Our specialist says: <br>{{c.answer}}
      </p>
    </div>
  </div>
  <div ng-if="data.no_api_key" class="panel-body">
    <p>
      You need to configure the options of this Widget first!
    </p>
  </div>
</div>]]></template>
    </sp_widget>
</record_update>
