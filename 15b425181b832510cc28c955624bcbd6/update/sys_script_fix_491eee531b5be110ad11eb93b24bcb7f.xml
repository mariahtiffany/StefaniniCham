<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_fix">
    <sys_script_fix action="INSERT_OR_UPDATE">
        <before>false</before>
        <description>The Script to setup the default personas</description>
        <name>Chameleon Setup - Personas</name>
        <record_for_rollback>true</record_for_rollback>
        <script>/**&#13;
 * Data Config&#13;
 */&#13;
&#13;
/** @type {Array&lt;{ name: string, table: string, field: string, description: string, validValues: string[]}&gt;} */&#13;
var personaAttributes = [&#13;
	{&#13;
		name: 'Department', table: 'sys_user', field: 'department', description: 'Department ID of User',&#13;
		validValues: ['IT', 'Finance', 'HR', 'Development', 'Product Management'],&#13;
	},&#13;
];&#13;
&#13;
/**&#13;
  * to add more, create a random GUID and just create a new property with &#13;
  * the persona you want.&#13;
  *&#13;
  * the ID must be deterministic since we need to use it to associate with widgets.&#13;
  *&#13;
  * @type {Record&lt;string, string&gt;} &#13;
  */&#13;
var personaCriteriaId = {&#13;
	PersonaDevelopment: '3d9310b0241143c3b1427e24ca8b5e6f',&#13;
	PersonaHR: '88db26250e754e288360ae57cdbec068',&#13;
	PersonaProductManagement: '0c57aff6fe2344f39bc1f49e56a21097',&#13;
	PersonaIT: 'be4e5a7552934ce0acbffa087edf400a',&#13;
	PersonaFinance: 'ba748ac9c6c6450f994e958c15401ad1',&#13;
};&#13;
&#13;
/** &#13;
  * In "personas" field, you can add as many personas you want to that criteria&#13;
  *&#13;
  * @type {Array&lt;{ id: string, name: string, personas: string[] }&gt;} &#13;
  */&#13;
var personaCriterias = [&#13;
	{ id: personaCriteriaId.PersonaDevelopment, name: 'Persona for Development', personas: ['Development'] },&#13;
	{ id: personaCriteriaId.PersonaHR, name: 'Persona for HR', personas: ['HR'] },&#13;
	{ id: personaCriteriaId.PersonaProductManagement, name: 'Persona for Product Management', personas: ['Product Management'] },&#13;
	{ id: personaCriteriaId.PersonaIT, name: 'Persona for IT', personas: ['IT'] },&#13;
	{ id: personaCriteriaId.PersonaFinance, name: 'Persona for Finance', personas: ['Finance'] },&#13;
];&#13;
/**&#13;
  * to add more, create a random GUID and just create a new property with &#13;
  * the Widget Instance ID. Also, put the link above the property that points&#13;
  * to the Widget Instance for future maintainability &#13;
  * &#13;
  * @type {Record&lt;string, string&gt;}&#13;
  */&#13;
var widgetInstanceId = {&#13;
	// /sp_config?id=page_edit&amp;p=ino_chameleon_home&amp;table=sp_instance&amp;sys_id=3dffa01b1bcfe5509b7d32231b4bcb45&amp;spa=1&#13;
	Home_ITHealth: '3dffa01b1bcfe5509b7d32231b4bcb45',&#13;
	// /sp_config?id=page_edit&amp;p=ino_chameleon_home&amp;table=sp_instance&amp;sys_id=1a44b6371b8bad10ad11eb93b24bcb05&amp;spa=1&#13;
	Home_YammerFeed: '1a44b6371b8bad10ad11eb93b24bcb05',&#13;
    // /sp_config?id=page_edit&amp;p=ino_chameleon_home&amp;table=sp_instance&amp;sys_id=132ba6e51b0be510ad11eb93b24bcbec&amp;spa=1&#13;
	Home_DataLakeGauge: '132ba6e51b0be510ad11eb93b24bcbec',&#13;
};&#13;
&#13;
/** &#13;
  * In "canView" and "cannotView" field, you can add the personas criterias that will view/not view the widget instance&#13;
  *&#13;
  * @type {Array&lt;{ widgetInstanceId: string, canView: string[], cannotView: string[] }&gt;} &#13;
  */&#13;
var widgetInstanceWithCriterias = [&#13;
	{ widgetInstanceId: widgetInstanceId.Home_ITHealth, canView: [personaCriteriaId.PersonaDevelopment], cannotView: [] },&#13;
	{ widgetInstanceId: widgetInstanceId.Home_YammerFeed, canView: [personaCriteriaId.PersonaHR], cannotView: [] },&#13;
	{ widgetInstanceId: widgetInstanceId.Home_DataLakeGauge, canView: [personaCriteriaId.PersonaDevelopment], cannotView: [] },&#13;
];&#13;
&#13;
/**&#13;
 * Main Code&#13;
 */&#13;
createPersonaAttributesAndValidValues();&#13;
createPersonas();&#13;
createPersonaCriterias();&#13;
createWidgetInstancePersonaCriterias();&#13;
&#13;
/**&#13;
 * Main Methods&#13;
 */&#13;
function createPersonaAttributesAndValidValues() {&#13;
	for (var attr of personaAttributes) {&#13;
		var attrGr = _getOrCreatePersonaAttribute(attr);&#13;
&#13;
		gs.debug('attrGr: ' + JSON.stringify(attrGr));&#13;
		gs.debug('attrGr: ' + attrGr.getValue('sys_id'));&#13;
&#13;
		for (var attrValidValue of attr.validValues) {&#13;
			var attrValidValueGr = _getOrCreatePersonaAttributeValidValue(attrGr.getValue('sys_id'), attrValidValue);&#13;
&#13;
			gs.debug('attrValidValueGr: ' + JSON.stringify(attrValidValueGr));&#13;
			gs.debug('Created Valid Value ' + attrValidValue + ' with ID: ' + attrValidValueGr.getValue('sys_id'));&#13;
		}&#13;
	}&#13;
}&#13;
&#13;
function createPersonas() {&#13;
	new x_stefa_persona_ba.utilPersonas().checkPersonasAll();&#13;
}&#13;
&#13;
function createPersonaCriterias() {&#13;
	for (var persona of personaCriterias) {&#13;
		var personaGr = new GlideRecord('x_stefa_persona_ba_persona_criteria');&#13;
		personaGr.addQuery('sys_id', '=', persona.id);&#13;
		personaGr.query();&#13;
&#13;
		gs.debug('Found criteria?: ' + personaGr.hasNext());&#13;
&#13;
		if (personaGr.hasNext())&#13;
			continue;&#13;
		&#13;
		gs.debug('Creating a new one...');&#13;
&#13;
		personaGr.initialize();&#13;
		personaGr.advanced = true;&#13;
		personaGr.match_all = false;&#13;
		personaGr.name = persona.name;&#13;
&#13;
		var personaIds = _findPersonaIdsByName(persona.personas);&#13;
		if (personaIds.length &lt;= 0) {&#13;
			gs.warn("Zero Personas found for " + persona.name + '. Looked for: ' + persona.personas.join(','));&#13;
			continue;&#13;
		}&#13;
&#13;
		personaGr.persona = personaIds.join(',');&#13;
		personaGr.script = '&lt;![CDATA[ var strArr = "' + personaIds.join(',') + '"; answer = new x_stefa_persona_ba.utilPersonas().arePersonas(user_id, strArr); ]]&gt;';&#13;
&#13;
		personaGr.setNewGuidValue(persona.id);&#13;
		personaGr.insert();&#13;
&#13;
		gs.debug('Inserting ' + persona.name);&#13;
	}&#13;
}&#13;
&#13;
/**&#13;
 * @param attr {typeof personaAttributes[number]}&#13;
 */&#13;
function _getOrCreatePersonaAttribute(attr) {&#13;
	var attrGr = new GlideRecord('x_stefa_persona_ba_persona_attribute_configuration');&#13;
	var attrExistResult = _attributeExist(attr);&#13;
	&#13;
	gs.debug('[getOrCreatePersonaAttribute] attrExistResult: ' + JSON.stringify(attrExistResult));&#13;
&#13;
	if (attrExistResult.exist) {&#13;
		attrGr = attrExistResult.value;&#13;
	} else {&#13;
		attrGr.setValue('name', attr.name);&#13;
		attrGr.setValue('table', attr.table);&#13;
		attrGr.setValue('field', attr.field);&#13;
		attrGr.setValue('description', attr.description);&#13;
&#13;
		attrGr.insert();&#13;
	}&#13;
&#13;
	gs.debug('[getOrCreatePersonaAttribute] final attrGr id: ' + attrGr.getValue('sys_id'));&#13;
&#13;
	return attrGr;&#13;
}&#13;
&#13;
/**&#13;
 * @param attr {typeof personaAttributes[number]}&#13;
 */&#13;
function _attributeExist(attr) {&#13;
	var gr = new GlideRecord('x_stefa_persona_ba_persona_attribute_configuration');&#13;
&#13;
	gr.addQuery('name', '=', attr.name);&#13;
	gr.addQuery('table', '=', attr.table);&#13;
	gr.addQuery('field', '=', attr.field);&#13;
	gr.query();&#13;
&#13;
	return { exist: gr.next(), value: gr };&#13;
}&#13;
&#13;
/**&#13;
 * @param personaAttributeId {string}&#13;
 * @param validValue {string}&#13;
 */&#13;
function _getOrCreatePersonaAttributeValidValue(personaAttributeId, validValue) {&#13;
	gs.debug('[getOrCreatePersonaAttributeValidValue] personaAttributeId: ' + personaAttributeId);&#13;
&#13;
	var attrValidValueGr = new GlideRecord('x_stefa_persona_ba_persona_attribute_valid_value');&#13;
	var result = _attributeValidValueExist(validValue);&#13;
	&#13;
	gs.debug('[getOrCreatePersonaAttributeValidValue] attrValidValueGr: ' + JSON.stringify(result));&#13;
&#13;
	if (result.exist) {&#13;
		attrValidValueGr = result.value;&#13;
	} else {&#13;
		attrValidValueGr.persona_attribute_configuration = personaAttributeId;&#13;
		attrValidValueGr.setValue('valid_value', validValue);&#13;
&#13;
		attrValidValueGr.insert();&#13;
	}&#13;
&#13;
	gs.debug('[getOrCreatePersonaAttributeValidValue] attrValidValueGr id: ' + attrValidValueGr.getValue('sys_id'));&#13;
&#13;
	return attrValidValueGr;&#13;
}&#13;
&#13;
/**&#13;
 * @param validValue {string}&#13;
 */&#13;
function _attributeValidValueExist(validValue) {&#13;
	var gr = new GlideRecord('x_stefa_persona_ba_persona_attribute_valid_value');&#13;
&#13;
	gr.addQuery('valid_value', '=', validValue);&#13;
	gr.query();&#13;
&#13;
	return { exist: gr.next(), value: gr };&#13;
}&#13;
&#13;
/**&#13;
 * @param personas {string[]}&#13;
 */&#13;
function _findPersonaIdsByName(personas) {&#13;
	var personaIds = [];&#13;
&#13;
	var gr = new GlideRecord('x_stefa_persona_ba_personas');&#13;
	gr.addQuery('name', 'IN', personas.join(','));&#13;
	gr.query();&#13;
&#13;
	while (gr.next()) {&#13;
		personaIds.push(gr.getValue('sys_id'));&#13;
	}&#13;
&#13;
	return personaIds;&#13;
}&#13;
&#13;
function createWidgetInstancePersonaCriterias() {&#13;
	for (var item of widgetInstanceWithCriterias) {&#13;
		for (var personaCriteriaIdCanView of item.canView) {&#13;
			createWhoXViewForPersonaCriteria('m2m_sp_instance_uc_can_view', item.widgetInstanceId, personaCriteriaIdCanView);&#13;
		}&#13;
&#13;
		for (var personaCriteriaIdCannotView of item.cannotView) {&#13;
			createWhoXViewForPersonaCriteria('m2m_sp_instance_uc_cannot_view', item.widgetInstanceId, personaCriteriaIdCannotView);&#13;
		}&#13;
	}&#13;
}&#13;
&#13;
/**&#13;
 * @param table {'m2m_sp_instance_uc_cannot_view' | 'm2m_sp_instance_uc_can_view'}&#13;
 * @param widgetInstanceId {string}&#13;
 * @param personaCriteriaId {string}&#13;
 */&#13;
function createWhoXViewForPersonaCriteria(table, widgetInstanceId, personaCriteriaId) {&#13;
	gs.debug('Trying create (' + table + ') for Widget #' + widgetInstanceId + ' and PersonaCriteria #' + personaCriteriaId);&#13;
&#13;
	var gr = new GlideRecord(table);&#13;
	gr.addQuery('sp_instance', '=', widgetInstanceId);&#13;
	gr.addQuery('user_criteria', '=', personaCriteriaId);&#13;
	gr.query();&#13;
&#13;
	if (gr.next()) {&#13;
		gs.debug('Found (' + table + ') for Widget #' + widgetInstanceId + ' and PersonaCriteria #' + personaCriteriaId);&#13;
&#13;
		return gr;&#13;
	}&#13;
&#13;
	gs.debug('Not found (' + table + ') for Widget #' + widgetInstanceId + ' and PersonaCriteria #' + personaCriteriaId);&#13;
&#13;
	gr.initialize();&#13;
	gr.sp_instance = widgetInstanceId;&#13;
	gr.user_criteria = personaCriteriaId;&#13;
	gr.insert();&#13;
&#13;
	return gr;&#13;
}</script>
        <sys_class_name>sys_script_fix</sys_class_name>
        <sys_created_by>vinicius.lourenco@stefanini.com</sys_created_by>
        <sys_created_on>2023-06-13 16:30:34</sys_created_on>
        <sys_id>491eee531b5be110ad11eb93b24bcb7f</sys_id>
        <sys_mod_count>23</sys_mod_count>
        <sys_name>Chameleon Setup - Personas</sys_name>
        <sys_package display_value="Chameleon" source="x_stefa_chameleon">15b425181b832510cc28c955624bcbd6</sys_package>
        <sys_policy/>
        <sys_scope display_value="Chameleon">15b425181b832510cc28c955624bcbd6</sys_scope>
        <sys_update_name>sys_script_fix_491eee531b5be110ad11eb93b24bcb7f</sys_update_name>
        <sys_updated_by>vinicius.lourenco@stefanini.com</sys_updated_by>
        <sys_updated_on>2023-06-19 15:45:15</sys_updated_on>
        <unloadable>false</unloadable>
    </sys_script_fix>
</record_update>
